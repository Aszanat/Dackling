\Int->Int->Bool x y = (x < y)\ 5 4
// Boolean False

let Bool->Bool->Bool: xor = \Bool->Bool->Bool x y = (if (x == y) then false else (x || y))\

xor true true
// Boolean False
xor false true
// Boolean True

let Int->Int->Int: uselessPlus x y = x + y

let Int->Int: plusOne s = uselessPlus 1 s
// does not work without "s" on both sides
// I know this way it is not exactly partial application, but it works the same...

plusOne 2
// Integer 3

let (Int->Int)->Int->Int: twoIntegerFuncEvaluator f x = f x

twoIntegerFuncEvaluator plusOne 10
// Integer 11