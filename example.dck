2 * (3 + 4)
// output: 17

true && false || true
// output: true

let Bool->Bool->Bool: or b1 b2 = (b1 || b2) in or true false
// output: true

let Int->Int: fact x = if (x == 1) then 1 else x * (fact (x - 1))
fact 3
// output: 6

let [[(Int->Int)]]->Int: len l = match l with
    | [::] -> 0
    | x :: xs -> 1 + (len xs)

let [Int]->Int: listSum l = match l with
    | x :: xs -> x + listSum xs
    | [::] -> 0
  in listSum [:1, 2, 3, 4:]
// output: 10
// look out for indentation! If "in" is on "let" level or on "|" level (or farther) it is not going to work!

let Int->[Int]: upTo x = let [Int]->Int->[Int]: help l e = if (e == 0) then l else (help (e::l) (e-1)) in (help [::] x)

let Int->Int: square x = x * x

let [[(Int->Int)]]: nestedFuncList = [:[::], [:square:], [:fact:]:]

len nestedFuncList
// output: 3

\Int->Int->Bool x y -> (x == y)\ 0 1
// Lambda body must be in brackets

/*
Another way of adding comments
*/