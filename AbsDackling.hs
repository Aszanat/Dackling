-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language dackling.

module AbsDackling where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Instructions = Instructions' BNFC'Position
data Instructions' a = Program a [Instr' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Instr = Instr' BNFC'Position
data Instr' a = ExprInstr a (Expr' a) | DefInstr a (Def' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Def = Def' BNFC'Position
data Def' a = FunDef a (Type' a) Ident [Ident] (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = EInt a Integer
    | ETrue a
    | EFalse a
    | EVar a Ident
    | ELExp a (Lam' a)
    | EEmpty a
    | EList a [Expr' a]
    | EListAdd a (Expr' a) (Expr' a)
    | ENeg a (Expr' a)
    | ENot a (Expr' a)
    | ECallFun a Ident [Expr' a]
    | ECallLam a (Lam' a) [Expr' a]
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | ELet a (Type' a) Ident [Ident] (Expr' a) (Expr' a)
    | EIf a (Expr' a) (Expr' a) (Expr' a)
    | EMatch a Ident [Pat' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Lam = Lam' BNFC'Position
data Lam' a = ELFun a (Type' a) [Ident] (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Pat = Pat' BNFC'Position
data Pat' a = PEmpty a (Expr' a) | PList a Ident Ident (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = Int a
    | Bool a
    | FunType a (Type' a) (Type' a)
    | FunArg a (Type' a) (Type' a)
    | LiType a (Type' a)
    | Any a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Instructions where
  hasPosition = \case
    Program p _ -> p

instance HasPosition Instr where
  hasPosition = \case
    ExprInstr p _ -> p
    DefInstr p _ -> p

instance HasPosition Def where
  hasPosition = \case
    FunDef p _ _ _ _ -> p

instance HasPosition Expr where
  hasPosition = \case
    EInt p _ -> p
    ETrue p -> p
    EFalse p -> p
    EVar p _ -> p
    ELExp p _ -> p
    EEmpty p -> p
    EList p _ -> p
    EListAdd p _ _ -> p
    ENeg p _ -> p
    ENot p _ -> p
    ECallFun p _ _ -> p
    ECallLam p _ _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    EOr p _ _ -> p
    EAnd p _ _ -> p
    ERel p _ _ _ -> p
    ELet p _ _ _ _ _ -> p
    EIf p _ _ _ -> p
    EMatch p _ _ -> p

instance HasPosition Lam where
  hasPosition = \case
    ELFun p _ _ _ -> p

instance HasPosition Pat where
  hasPosition = \case
    PEmpty p _ -> p
    PList p _ _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    Int p -> p
    Bool p -> p
    FunType p _ _ -> p
    FunArg p _ _ -> p
    LiType p _ -> p
    Any p -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    LE p -> p
    GTH p -> p
    GE p -> p
    EQU p -> p
    NE p -> p

